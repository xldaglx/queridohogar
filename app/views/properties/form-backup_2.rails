<%= form_for(@property) do |f| %>
  <% if @property.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@property.errors.count, "error") %> prohibited this property from being saved:</h2>

      <ul>
      <% @property.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  <div class="form-group">  
  <%= f.label :type %><br />
  <%= f.collection_select :type_id, Type.all, :id, :description %>
  </div>

  <div class="form-group">  
  <%= f.label :operation %><br />
  <%= f.collection_select :operation_id, Operation.all, :id, :description %>
  </div>
 <%= f.label :pictures %>
  <%= f.file_field :pictures, multiple: true, accept: "image/jpeg, image/jpg, image/gif, image/png" %>

  <div class="form-group">  
  <%= f.label :additional %><br />
  <%= f.collection_check_boxes :additional_ids, Additional.all, :id, :description %>
  </div>

  <div class="form-group">
    <%= f.label :price %><br>
    <%= f.text_field :price %>
  </div>

  <div class="form-group">
    <%= f.label :currency %><br>
    <%= f.text_field :currency %>
  </div>
  <div class="form-group">
    <%= f.label :description %><br>
    <%= f.text_field :description %>
  </div>
  <h3> Direcci√≥n </h3>
    <div id="locationField">
      <input id="autocomplete" placeholder="Enter your address"
             onFocus="geolocate()" type="text"></input>
    </div>
    <style>
#myMap {
   height: 350px;
   width: 680px;
}
</style>
<div id="myMap"></div>
<input id="address" type="text" style="width:600px;"/><br/>
<input type="text" id="latitude" placeholder="Latitude"/>
<input type="text" id="longitude" placeholder="Longitude"/>

  <div class="form-group">
    <%= f.label :state %><br>
    <%= f.text_field :state %>
  </div>
  <div class="form-group">
    <%= f.label :city %><br>
    <%= f.text_field :city %>
  </div>
  <div class="form-group">
    <%= f.label :street %><br>
    <%= f.text_field :street %>
  </div>
  <div class="form-group">
    <%= f.label :number %><br>
    <%= f.text_field :number %>
  </div>
  <div class="form-group">
    <%= f.label :cp %><br>
    <%= f.number_field :cp %>
  </div>
  <div class="form-group">
    <%= f.label :lat %><br>
    <%= f.text_field :lat %>
  </div>
  <div class="form-group">
    <%= f.label :lng %><br>
    <%= f.text_field :lng %>
  </div>
  <div class="form-group">
    <%= f.label :address_google %><br>
    <%= f.text_field :address_google %>
  </div>
  <div class="form-group">
    <%= f.label :antique %><br>
    <%= f.text_field :antique %>
  </div>
  <div class="form-group">
    <%= f.label :available %><br>
    <%= f.date_select :available %>
  </div>
  <div class="form-group">
    <%= f.label :park %><br>
    <%= f.number_field :park %>
  </div>
  <div class="form-group">
    <%= f.label :bathdroom %><br>
    <%= f.text_field :bathdroom %>
  </div>
  <div class="form-group">
    <%= f.label :rooms %><br>
    <%= f.number_field :rooms %>
  </div>
  <div class="form-group">
    <%= f.label :m2 %><br>
    <%= f.text_field :m2 %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>




    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
    </style>
    <link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
    <style>
      #locationField, #controls {
        position: relative;
        width: 480px;
      }
      #autocomplete {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 99%;
      }
      .label {
        text-align: right;
        font-weight: bold;
        width: 100px;
        color: #303030;
      }
      #address {
        border: 1px solid #000090;
        background-color: #f0f0ff;
        width: 480px;
        padding-right: 2px;
      }
      #address td {
        font-size: 10pt;
      }
      .field {
        width: 99%;
      }
      .slimField {
        width: 80px;
      }
      .wideField {
        width: 200px;
      }
      #locationField {
        height: 20px;
        margin-bottom: 2px;
      }
    </style>
    <script>
// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.

    </script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB4g_oeaJQJVwnlrET989qA7WERTrtrABA&libraries=places&callback=initAutocomplete"></script>

<script type="text/javascript"> 

jQuery(document).ready(function($) {
  if ("<%= controller.action_name %>" == "edit"){
    var lat = $('#property_lat').val();
    var lng = $('#property_lng').val();
    initialize(lat, lng);    
  }else{
    alert();
var placeSearch, autocomplete;
var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search to geographical
  // location types.
  autocomplete = new google.maps.places.Autocomplete(
      /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
      {types: ['geocode']});

  // When the user selects an address from the dropdown, populate the address
  // fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

// [START region_fillform]
function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  var lat = place.geometry.location.lat();
  var lng = place.geometry.location.lng();
  initialize(lat,lng);

  // Get each component of the address from the place details
  // and fill the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      if(addressType == "street_number"){
        $('#property_number').val(val);
      }
      if(addressType == "route"){
        $('#property_street').val(val);   
      }
      if(addressType == "locality"){
        $('#property_city').val(val);           
      }
      if(addressType == "administrative_area_level_1"){
        $('#property_state').val(val);           
      }
      if(addressType == "postal_code"){
        $('#property_cp').val(val);           
      }
      $('#property_address_google').val($('#autocomplete').val());
    }
  }
}
// [END region_fillform]

// [START region_geolocation]
// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
    });
  }
}
// [END region_geolocation]
  }
});  


var map;
var marker;
var lat = 20.268455824834792;
var lng = 85.84099235520011
var geocoder = new google.maps.Geocoder();
var infowindow = new google.maps.InfoWindow();
function initialize(lat, lng){
  var myLatlng = new google.maps.LatLng(lat,lng);
  var mapOptions = {
    zoom: 18,
    center: myLatlng,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };

  map = new google.maps.Map(document.getElementById("myMap"), mapOptions);
  marker = new google.maps.Marker({
  map: map,
  position: myLatlng,
  draggable: true 
}); 

geocoder.geocode({'latLng': myLatlng }, function(results, status) {
  if (status == google.maps.GeocoderStatus.OK) {
    if (results[0]) {
      $('#latitude,#longitude').show();
      $('#property_address_google').val(results[0].formatted_address);
      $('#property_lat').val(marker.getPosition().lat());
      $('#property_lng').val(marker.getPosition().lng());
      infowindow.setContent(results[0].formatted_address);
      infowindow.open(map, marker);
    }
  }
});

google.maps.event.addListener(marker, 'dragend', function() {

geocoder.geocode({'latLng': marker.getPosition()}, function(results, status) {
  if (status == google.maps.GeocoderStatus.OK) {
    if (results[0]) {
      $('#property_address_google').val(results[0].formatted_address);
      $('#property_lat').val(marker.getPosition().lat());
      $('#property_lng').val(marker.getPosition().lng());
      infowindow.setContent(results[0].formatted_address);
      infowindow.open(map, marker);
      }
    }
  });
});

}



</script>
